resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: credhub
  type: docker-image
  source:
    repository: cfcommunity/credhub-resource
    tag: v0.1.1

x-resource-anchors:
  s3-products: &s3-products
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3_secret_access_key))

  s3-backups: &s3-backups
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets.backups))

resources:
- name: terraform-image
  type: docker-image
  source:
    repository: hashicorp/terraform
    tag: 0.11.14

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 3\.0\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3-products
    regexp: platform-automation/platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    <<: *s3-products
    regexp: platform-automation/platform-automation-image-(.*).tgz

- name: bbr-release
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: p-bosh-backup-and-restore
    product_version: 1\.5\.(.*)
    sort_by: semver

- name: bbr-tasks
  type: git
  source:
    uri: https://github.com/pivotal-cf/bbr-pcf-pipeline-tasks.git
    branch: v1.2.0

- name: ops-manager-image
  type: s3
  source:
    <<: *s3-products
    regexp: ops-manager/OpsManager(.*)onAzure.yml

- name: ops-manager-state-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: state
    regexp: nonprod/ops-manager/state-(.*).json
    initial_path: nonprod/ops-manager/state-0.json
    initial_content_text: "{}"

- name: pas-stemcell
  type: s3
  source:
    <<: *s3-products
    regexp: pas-stemcell/bosh-stemcell-(.*).tgz

- name: pas-product
  type: s3
  source:
    <<: *s3-products
    regexp: pas/cf-(.*).pivotal

- name: mysql-stemcell
  type: s3
  source:
    <<: *s3-products
    regexp: mysql-stemcell/bosh-stemcell-(.*).tgz

- name: mysql-product
  type: s3
  source:
    <<: *s3-products
    regexp: mysql/pivotal-mysql-(.*).pivotal

- name: rabbitmq-stemcell
  type: s3
  source:
    <<: *s3-products
    regexp: rabbitmq-stemcell/bosh-stemcell-(.*).tgz

- name: rabbitmq-product
  type: s3
  source:
    <<: *s3-products
    regexp: rabbitmq/p-rabbitmq-(.*).pivotal

- name: redis-stemcell
  type: s3
  source:
    <<: *s3-products
    regexp: redis-stemcell/bosh-stemcell-(.*).tgz

- name: redis-product
  type: s3
  source:
    <<: *s3-products
    regexp: redis/p-redis-(.*).pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    <<: *s3-products
    regexp: healthwatch-stemcell/bosh-stemcell-(.*).tgz

- name: healthwatch-product
  type: s3
  source:
    <<: *s3-products
    regexp: healthwatch/p-healthwatch-(.*).pivotal

- name: configuration
  type: git
  source:
    private_key: ((configuration_private_key.private_key))
    uri: ((configuration.uri))
    branch: ((configuration.branch))

- name: lets-encrypt-cert
  type: credhub
  source:
    server: ((credhub-server))
    username: ((credhub-client))
    password: ((credhub-secret))
    path: /concourse/main/((env_name))/lets_encrypt_cert
    skip_tls_validation: true

- name: ops-manager-backup
  type: s3
  source:
    <<: *s3-backups
    regexp: ((env_name))/ops-manager/installation-(.*).zip

- name: pas-backup
  type: s3
  source:
    <<: *s3-backups
    regexp: ((env_name))/pas/pas-backup-(.*).tar

groups:
- name: install
  jobs:
  - install-opsman
  - upgrade-opsman
  - upload-and-stage-pas
  - configure-pas
  - upload-and-stage-mysql
  - configure-mysql
  - upload-and-stage-rabbitmq
  - configure-rabbitmq
  - upload-and-stage-redis
  - configure-redis
  - upload-and-stage-healthwatch
  - configure-healthwatch
  - upload-stemcells
  - apply-product-changes
- name: iaas
  jobs:
  - pave-iaas
- name: fetch
  jobs:
  - fetch-platform-automation
  - fetch-ops-manager
  - fetch-pas
  - fetch-mysql
  - fetch-rabbitmq
  - fetch-redis
  - fetch-healthwatch
- name: backup
  jobs:
  - backup-ops-manager
  - backup-pas
- name: delete
  jobs:
  - delete-foundation

x-job-anchors:
  credhub-interpolate-all: &credhub-interpolate-all
    task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: ((credhub-interpolation-prefix))
      INTERPOLATION_PATHS: "((env_name))/vars ((env_name))/product-configs"
      SKIP_MISSING: false
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: configuration-with-secrets

  _get-platform-automation-image: &_get-platform-automation-image
    get: platform-automation-image
    params:
      unpack: true

  _get-platform-automation-tasks: &_get-platform-automation-tasks
    get: platform-automation-tasks
    params:
      unpack: true

  get-platform-automation-resources: &get-platform-automation-resources
    aggregate:
    - <<: *_get-platform-automation-image
    - <<: *_get-platform-automation-tasks

  get-platform-automation-tasks-only: &get-platform-automation-tasks-only
    aggregate:
    - <<: *_get-platform-automation-image

  remove-version-from-state-filename: &remove-version-from-state-filename
    task: remove-version-from-state-filename
    image: platform-automation-image
    config:
      platform: linux
      inputs:
      - name: ops-manager-state-s3
      outputs:
      - name: renamed-state
      run:
        path: sh
        args:
        - -c
        - |
          cp ops-manager-state-s3/state-*.json renamed-state/state.json

  add-version-to-state-filename: &add-version-to-state-filename
    task: add-version-to-state-filename
    image: platform-automation-image
    config:
      platform: linux
      inputs:
      - name: generated-state
      outputs:
      - name: versioned
      run:
        path: sh
        args:
        - -c
        - |
          timestamp="$(date '+%Y%m%d.%-H%M.%S+%Z')"
          cp generated-state/state.json versioned/state-$timestamp.json
          echo "New state file is named state-$timestamp.json"

  opsman_credentials: &opsman_credentials
    OPSMAN_URL: https://((ops_manager_host))
    OPSMAN_USERNAME: admin
    OPSMAN_PASSWORD: ((opsman_password))
    OPSMAN_PRIVATE_KEY: ((ops_manager_ssh_key.private_key))

jobs:
- name: fetch-platform-automation
  plan:
  - get: platform-automation-pivnet
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: fetch-ops-manager
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: download-ops-manager
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((env_name))/product-configs/ops-manager.yml
    input_mapping:
      config: configuration-with-secrets
  - aggregate:
    - put: ops-manager-image
      params:
        file: downloaded-product/*.yml

- name: fetch-pas
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((env_name))/product-configs/pas.yml
    input_mapping:
      config: configuration-with-secrets
    output_mapping:
      downloaded-stemcell: pas-stemcell
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-mysql
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: download-mysql-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((env_name))/product-configs/mysql.yml
    input_mapping:
      config: configuration-with-secrets
    output_mapping:
      downloaded-stemcell: mysql-stemcell
  - aggregate:
    - put: mysql-product
      params:
        file: downloaded-product/*.pivotal
    - put: mysql-stemcell
      params:
        file: mysql-stemcell/*.tgz

- name: fetch-rabbitmq
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: download-rabbitmq-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((env_name))/product-configs/rabbitmq.yml
    input_mapping:
      config: configuration-with-secrets
    output_mapping:
      downloaded-stemcell: rabbitmq-stemcell
  - aggregate:
    - put: rabbitmq-product
      params:
        file: downloaded-product/*.pivotal
    - put: rabbitmq-stemcell
      params:
        file: rabbitmq-stemcell/*.tgz

- name: fetch-redis
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: download-redis-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((env_name))/product-configs/redis.yml
    input_mapping:
      config: configuration-with-secrets
    output_mapping:
      downloaded-stemcell: redis-stemcell
  - aggregate:
    - put: redis-product
      params:
        file: downloaded-product/*.pivotal
    - put: redis-stemcell
      params:
        file: redis-stemcell/*.tgz

- name: fetch-healthwatch
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((env_name))/product-configs/healthwatch.yml
    input_mapping:
      config: configuration-with-secrets
    output_mapping:
      downloaded-stemcell: healthwatch-stemcell
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: pave-iaas
  plan:
  - <<: *get-platform-automation-tasks-only
  - aggregate:
    - get: configuration
    - get: terraform-image
    - get: lets-encrypt-cert
  - task: terraform-apply
    image: terraform-image
    file: configuration/tasks/terraform-apply.yml
    input_mapping:
      configuration: configuration
    params:
      TF_VAR_subscription_id: ((azure_subscription_id))
      TF_VAR_tenant_id: ((azure_tenant_id))
      TF_VAR_client_id: ((azure_client_id))
      TF_VAR_client_secret: ((azure_client_secret))
      ARM_ACCESS_KEY: ((pcfrefazureacct_secret_key))
      TERRAFORM_CONFIG_DIR: ((env_name))/terraform
  - task: credhub-put
    image: platform-automation-image
    file: configuration/tasks/credhub-set-certificate.yml
    input_mapping:
      certs: generated-certs
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      NAME: /concourse/main/((env_name))/lets_encrypt_cert

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
    - get: lets-encrypt-cert
    - get: ops-manager-image
    - get: ops-manager-state-s3
  - <<: *credhub-interpolate-all
  - <<: *remove-version-from-state-filename
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: ops-manager-image
      state: renamed-state
      config: configuration
      vars: configuration-with-secrets
    params:
      VARS_FILES: vars/((env_name))/vars/ops-manager-vars.yml
      STATE_FILE: state.json
      OPSMAN_CONFIG_FILE: ((env_name))/config/ops-manager.yml
    ensure:
      do:
      - <<: *add-version-to-state-filename
      - put: ops-manager-state-s3
        params:
          file: versioned/state-*.json
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: configuration-with-secrets
      config: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
      AUTH_CONFIG_FILE: ((env_name))/vars/auth.yml
  - task: configure-ssl
    image: platform-automation-image
    file: configuration/tasks/update-ssl-certificate.yml
    input_mapping:
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
      CERTIFICATE_PEM: |
        ((lets_encrypt_cert.certificate))
        ((lets_encrypt_cert.ca))
      PRIVATE_KEY_PEM: ((lets_encrypt_cert.private_key))
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: configuration-with-secrets
      vars: configuration-with-secrets
    params:
      VARS_FILES: vars/((env_name))/vars/director-vars.yml
      ENV_FILE: ((env_name))/vars/env.yml
      DIRECTOR_CONFIG_FILE: ((env_name))/config/director.yml
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: ops-manager-image
    - get: ops-manager-backup
    - get: ops-manager-state-s3
    - get: configuration
  - <<: *credhub-interpolate-all
  - <<: *remove-version-from-state-filename
  - task: upgrade-ops-manager
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      installation: ops-manager-backup
      image: ops-manager-image
      state: renamed-state
      config: configuration
      env: configuration-with-secrets
      vars: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
      OPSMAN_CONFIG_FILE: ((env_name))/config/ops-manager.yml
      VARS_FILES: vars/((env_name))/vars/ops-manager-vars.yml
      STATE_FILE: state.json
    ensure:
      do:
      - <<: *add-version-to-state-filename
      - put: ops-manager-state-s3
        params:
          file: versioned/state-*.json

- name: backup-ops-manager
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: ops-manager-backup
    params:
      file: installation/installation-*.zip

- name: upload-and-stage-pas
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
    - get: pas-product
  - <<: *credhub-interpolate-all
  - task: upload-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: stage-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      product: pas-product
      env: configuration-with-secrets

- name: configure-pas
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: pas-product
    - get: configuration
      passed:
      - upload-and-stage-pas
    - get: lets-encrypt-cert
  - <<: *credhub-interpolate-all
  - task: configure-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: ((env_name))/config/cf.yml
      VARS_FILES: vars/((env_name))/vars/cf-vars.yml
      OPS_FILES: config/((env_name))/operations/minimal-pas-2.4-instance-count.yml
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      config: configuration
      env: configuration-with-secrets
      vars: configuration-with-secrets

- name: upload-and-stage-mysql
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
    - get: mysql-product
  - <<: *credhub-interpolate-all
  - task: upload-mysql
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: mysql-product
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: stage-mysql
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      product: mysql-product
      env: configuration-with-secrets

- name: configure-mysql
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
      passed:
      - upload-and-stage-mysql
  - <<: *credhub-interpolate-all
  - task: configure-mysql
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: ((env_name))/config/mysql.yml
      VARS_FILES: vars/((env_name))/vars/mysql-vars.yml
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      config: configuration
      env: configuration-with-secrets
      vars: configuration-with-secrets

- name: upload-and-stage-rabbitmq
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
    - get: rabbitmq-product
  - <<: *credhub-interpolate-all
  - task: upload-rabbitmq
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: rabbitmq-product
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: stage-rabbitmq
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      product: rabbitmq-product
      env: configuration-with-secrets

- name: configure-rabbitmq
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
      passed:
      - upload-and-stage-rabbitmq
  - <<: *credhub-interpolate-all
  - task: configure-rabbitmq
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: ((env_name))/config/rabbitmq.yml
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      config: configuration
      env: configuration-with-secrets
      vars: configuration-with-secrets

- name: upload-and-stage-redis
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
    - get: redis-product
  - <<: *credhub-interpolate-all
  - task: upload-redis
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: redis-product
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: stage-redis
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      product: redis-product
      env: configuration-with-secrets

- name: configure-redis
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
      passed:
      - upload-and-stage-redis
  - <<: *credhub-interpolate-all
  - task: configure-redis
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: ((env_name))/config/redis.yml
      VARS_FILES: vars/((env_name))/vars/redis-vars.yml
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      config: configuration
      env: configuration-with-secrets
      vars: configuration-with-secrets

- name: upload-and-stage-healthwatch
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
    - get: healthwatch-product
  - <<: *credhub-interpolate-all
  - task: upload-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: healthwatch-product
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: stage-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    params:
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      product: healthwatch-product
      env: configuration-with-secrets

- name: configure-healthwatch
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
      passed:
      - upload-and-stage-healthwatch
  - <<: *credhub-interpolate-all
  - task: configure-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: ((env_name))/config/healthwatch.yml
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      config: configuration
      env: configuration-with-secrets

- name: upload-stemcells
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: pas-stemcell
      trigger: true
    - get: mysql-stemcell
      trigger: true
    - get: rabbitmq-stemcell
      trigger: true
    - get: redis-stemcell
      trigger: true
    - get: healthwatch-stemcell
      trigger: true
    - get: configuration
      passed:
      - configure-pas
      - configure-mysql
      - configure-rabbitmq
      - configure-redis
      - configure-healthwatch
  - <<: *credhub-interpolate-all
  - task: upload-pas-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-with-secrets
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: upload-mysql-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-with-secrets
      stemcell: mysql-stemcell
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: upload-rabbitmq-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-with-secrets
      stemcell: rabbitmq-stemcell
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: upload-redis-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-with-secrets
      stemcell: redis-stemcell
    params:
      ENV_FILE: ((env_name))/vars/env.yml
  - task: upload-healthwatch-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-with-secrets
      stemcell: healthwatch-stemcell
    params:
      ENV_FILE: ((env_name))/vars/env.yml

- name: apply-product-changes
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
      passed:
      - upload-stemcells
      - configure-pas
      - configure-mysql
      - configure-rabbitmq
      - configure-redis
      - configure-healthwatch
  - <<: *credhub-interpolate-all
  - task: apply-changes
    image: platform-automation-image
    file: configuration/tasks/om-apply-changes-skip-unchanged.yml
    params:
      ENV_FILE: ((env_name))/vars/env.yml
    input_mapping:
      env: configuration-with-secrets

- name: delete-foundation
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-resources
  - aggregate:
    - get: configuration
  - <<: *credhub-interpolate-all
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: configuration-with-secrets
    params:
      ENV_FILE: ((env_name))/vars/env.yml

- name: backup-pas
  serial: true
  serial_groups: [ install ]
  plan:
  - <<: *get-platform-automation-tasks-only
  - aggregate:
    - get: bbr-tasks
    - get: bbr-release
  - task: extract-binary
    file: bbr-tasks/tasks/extract-bbr-binary/task.yml
  - task: bbr-backup-pas
    file: bbr-tasks/tasks/bbr-backup-pas/task.yml
    input_mapping:
      bbr-pipeline-tasks-repo: bbr-tasks
    params:
      <<: *opsman_credentials
    on_failure:
      task: bbr-cleanup-pas
      file: bbr-pipeline-tasks-repo/tasks/bbr-cleanup-pas/task.yml
      params:
        <<: *opsman_credentials
  - task: add-version-to-artifact
    image: platform-automation-image
    config:
      platform: linux
      inputs:
      - name: pas-backup-artifact
      outputs:
      - name: versioned
      run:
        path: sh
        args:
        - -c
        - |
          timestamp="$(date '+%Y%m%d.%-H%M.%S+%Z')"
          cp pas-backup-artifact/pas-backup.tar versioned/pas-backup-$timestamp.tar
          echo "New state file is named pas-backup-$timestamp.tar"
  - put: pas-backup
    params:
      file: versioned/pas-backup-*.tar